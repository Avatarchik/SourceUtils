#include "LightmappedBase.frag.txt"

uniform highp mat4 uProjection;
uniform mat4 uInverseProjection;
uniform mat4 uInverseView;

uniform sampler2D uNormalMap;

uniform sampler2D uRefractColor;
uniform sampler2D uRefractDepth;

uniform float uRefractAmount;

uniform vec4 uScreenParams;
uniform vec4 uClipParams;
uniform vec3 uCameraPos;

// x: start, y: end, z: 1 / (end - start)
uniform vec3 uWaterFogParams;
uniform vec3 uWaterFogColor;

uniform vec3 uReflectTint;

vec4 CalcEyeFromWindow(in vec3 windowSpace)
{
	vec3 ndcPos;
	ndcPos.xy = (2.0 * windowSpace.xy) * (uScreenParams.zw) - vec2(1.0, 1.0);
	ndcPos.z = (2.0 * windowSpace.z - gl_DepthRange.near - gl_DepthRange.far) / (gl_DepthRange.far - gl_DepthRange.near);

	vec4 clipPos;
	clipPos.w = uProjection[3][2] / (ndcPos.z - (uProjection[2][2] / uProjection[2][3]));
	clipPos.xyz = ndcPos * clipPos.w;

	return uInverseProjection * clipPos;
}

vec3 getWorldPos(float sampleDepth)
{
	return (uInverseView * CalcEyeFromWindow(vec3(gl_FragCoord.xy, sampleDepth))).xyz;
}

float getWaterDepth(vec3 surfacePos, vec3 samplePos)
{
	return -(samplePos - surfacePos).z;
}

void main()
{
	vec3 surfPos = getWorldPos(gl_FragCoord.z);
	vec3 viewDir = normalize(surfPos - uCameraPos);

    vec4 normSampleA = texture2D(uNormalMap, vTextureCoord + vec2(0.02, -0.02) * uTime.x);
    vec4 normSampleB = texture2D(uNormalMap, vTextureCoord + vec2(-0.01, 0.03) * uTime.x);
    vec3 normal = normalize(normSampleA.xyz + normSampleB.xyz - vec3(1.0, 1.0, 1.0));

	vec3 lightDir = normalize(vec3(3.0, -5.0, 11.0));
	vec3 lightmapColor = applyLightmap(vec3(1.0, 1.0, 1.0));
	float lightmapIntens = min((lightmapColor.r + lightmapColor.g + lightmapColor.b) * 0.3, 1.0);

	float lightIntens = pow(max(0.0, dot(lightDir, reflect(viewDir, normal))), 8.0) * (normSampleA.w + normSampleB.w) * 0.5;

    vec2 screenPos = gl_FragCoord.xy * uScreenParams.zw;
	
	vec3 opaquePos = getWorldPos(texture2D(uRefractDepth, screenPos).r);
	float opaqueDepth = getWaterDepth(surfPos, opaquePos);

	vec2 refractedScreenPos = screenPos + normal.xy * opaqueDepth * uRefractAmount / 512.0;

	vec3 refractedPos = getWorldPos(texture2D(uRefractDepth, refractedScreenPos).r);
	float refractedDepth = getWaterDepth(surfPos, refractedPos);
	float sampleMix = float(refractedDepth > 0.0);

    vec3 refractedSample = texture2D(uRefractColor, mix(screenPos, refractedScreenPos, sampleMix)).rgb;
	float refractedDepthDist = mix(opaqueDepth, refractedDepth, sampleMix);

	float fogDensity = min(max((refractedDepthDist - uWaterFogParams.x) * uWaterFogParams.z, 0.0), 1.0);

	vec3 attenuatedColor = mix(refractedSample, lightmapColor * uWaterFogColor, pow(fogDensity, 0.5));
	vec3 litColor = mix(attenuatedColor, uReflectTint, lightIntens);

    gl_FragColor = vec4(applyFog(litColor), 1.0);
}
