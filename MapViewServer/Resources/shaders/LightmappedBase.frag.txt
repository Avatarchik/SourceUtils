precision mediump float;

varying vec2 vTextureCoord;
varying vec2 vLightmapCoord;

uniform sampler2D uBaseTexture;
uniform sampler2D uLightmap;
uniform vec4 uLightmapParams;

// x: near fog density, y: far plane fog density, z: min density, w: max density
uniform vec4 uFogParams;
uniform vec3 uFogColor;

vec3 applyFog(vec3 inColor)
{
    float depth = ((2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far) / (gl_DepthRange.far - gl_DepthRange.near)) / gl_FragCoord.w;
    float fogDensity = uFogParams.x + uFogParams.y * depth;

    fogDensity = min(max(fogDensity, uFogParams.z), uFogParams.w);

    return mix(inColor, uFogColor, fogDensity);
}

vec3 decompressSample(vec4 sample) {
    float exp = sample.a * 255.0 - 128.0;
    return sample.rgb * pow(2.0, exp);
}

vec3 applyLightmap(vec3 inColor) {
    const float gamma = 0.5;

    vec2 size = uLightmapParams.xy;
    vec2 invSize = uLightmapParams.zw;
    vec2 scaledCoord = vLightmapCoord * size;
    vec2 minCoord = floor(scaledCoord);
    vec2 maxCoord = minCoord + vec2(1.0, 1.0);
    vec2 delta = scaledCoord - minCoord;

    minCoord *= invSize;
    maxCoord *= invSize;

    vec3 sampleA = decompressSample(texture2D(uLightmap, vec2(minCoord.x, minCoord.y)));
    vec3 sampleB = decompressSample(texture2D(uLightmap, vec2(maxCoord.x, minCoord.y)));
    vec3 sampleC = decompressSample(texture2D(uLightmap, vec2(minCoord.x, maxCoord.y)));
    vec3 sampleD = decompressSample(texture2D(uLightmap, vec2(maxCoord.x, maxCoord.y)));

    vec3 sample = mix(mix(sampleA, sampleB, delta.x), mix(sampleC, sampleD, delta.x), delta.y);

    return inColor * pow(sample, vec3(gamma, gamma, gamma));
}
